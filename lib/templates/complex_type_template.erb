# -*- ruby -*-
#--
# Copyright 2008 Danny Coates, Ashkan Farhadtouski
# All rights reserved.
# See LICENSE for permissions.
#++
# AUTOGENERATED ComplexType

module HealthVault
  module WCData
  <% modules.each do |m| %>module <%= classify(m) %>
  <% end %>
      class <%= class_name %> < ComplexType
        
  <% children.each do |child| %>   
       <% if child[:max] == '1' %>
        <% if child[:min].to_i > 0 %>#<b>REQUIRED</b><% end %>
        <%= child[:doc] %><%= "#<em>value</em> is a #{child[:class]}" %>
        def <%= underscore(child[:name]) %>=(value)
          @children['<%= child[:name] %>'][:value] = value
        end
        
        <%= "#<b>returns</b>: a #{child[:class]}" %>
        def <%= underscore(child[:name]) %>
          return @children['<%= child[:name] %>'][:value]
        end
       <% else %>
        <%= "#<em>value</em> is a #{child[:class]}" %>
        def add_<%= underscore(child[:name]) %>(value)
          @children['<%= child[:name] %>'][:value] << value
        end
        
        <%= "#<em>value</em> is a ##{child[:class]}" %>
        def remove_<%= underscore(child[:name]) %>(value)
            @children['<%= child[:name] %>'][:value].delete(value)
        end
        
        <% if child[:min].to_i > 0 %>#<b>REQUIRED</b><% end %>
        <%= child[:doc] %><%= "#<b>returns</b>: a #{child[:class]} Array" %>
        def <%= underscore(child[:name]) %>
          return @children['<%= child[:name] %>'][:value]
        end
       <% end %>
  <% end %>
      
        def initialize
          super
          self.tag_name = '<%= tag_name %>'
        <% children.each do |child| %>
          <% if child[:max] == '1' %>
          @children['<%= child[:name] %>'] = {:name => '<%= child[:name] %>', :class => <%= child[:class] %>, :value => nil, :min => <%= child[:min] %>, :max => <%= child[:max] %>, :order => <%= child[:order] %>, :place => :<%= child[:type]  %>, :choice => <%= child[:choice].to_i %> }
            <% if child[:min] == '1' && child[:choice].nil? %>
          @children['<%= child[:name] %>'][:value] = <%= child[:class] %>.new
            <% end %>
          <% else %>
          @children['<%= child[:name] %>'] = {:name => '<%= child[:name] %>', :class => <%= child[:class] %>, :value => Array.new, :min => <%= child[:min] %>, :max => <%= child[:max] %>, :order => <%= child[:order] %>, :place => :<%= child[:type] %>, :choice => <%= child[:choice].to_i %> }
          <% end %>
        <% end %>
        end
      end
  <%modules.length.times do %>end
  <%  end %>
  end
end
